{"version":3,"sources":["webpack:///webpack/bootstrap 2b54b9cc485165a13bc9","webpack:///./src/entities/system.entity.ts","webpack:///./src/services/util.service.ts","webpack:///./src/entities/point.entity.ts","webpack:///./src/entities/circle.entity.ts","webpack:///./src/main.ts","webpack:///./src/app.ts","webpack:///./src/services/game.service.ts","webpack:///./src/entities/polygon.entity.ts","webpack:///./src/entities/vertex.entity.ts","webpack:///./src/entities/orbit.entity.ts"],"names":[],"mappings":"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","file":"polygon.sparksoft.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2b54b9cc485165a13bc9","import {Point} from \"./point.entity\";\r\nimport {Polygon} from \"./polygon.entity\";\r\nimport {GetRandomArbitrary} from \"../services/util.service\";\r\nimport {Circle} from \"./circle.entity\";\r\n/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport class System {\r\n    public sun: Circle;\r\n    public planets: Polygon[];\r\n    public sentinelOrbitDistance: number;\r\n    constructor(\r\n        public point: Point\r\n    ){\r\n        this.planets = [];\r\n        this.sun = null;\r\n        //TODO: Fix these values\r\n        this.sentinelOrbitDistance = GetRandomArbitrary(100, 20);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/system.entity.ts","import {Point} from \"../entities/point.entity\";\r\nimport {Vertex} from \"../entities/vertex.entity\";\r\nimport {Polygon} from \"../entities/polygon.entity\";\r\n/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport function GetRandomArbitrary(max: number, min: number = 0, floor: boolean = true) {\r\n    let res = Math.random() * (max - min) + min;\r\n    return floor ? Math.floor(res) : res;\r\n}\r\n\r\nexport const DistanceBetweenTwoPoints =\r\n    (point1: Point, point2: Point): number =>\r\n        Math.sqrt(Math.pow(point1.x-point2.x, 2)+Math.pow(point1.y-point2.y, 2));\r\n\r\n//Could be useless\r\nexport function GetVertexFromPolygonAndAngle(polygon: Polygon, angle: number): Vertex {\r\n    return new Vertex(\r\n        (polygon.point.x+polygon.radius)*Math.cos(angle),\r\n        (polygon.point.y+polygon.radius)*Math.sin(angle)\r\n    );\r\n}\r\n\r\nexport function GetVertexFromRadiusAndAngle(radius: number, angle: number): Vertex {\r\n    return new Vertex(\r\n        (radius)*Math.cos(angle),\r\n        (radius)*Math.sin(angle)\r\n    );\r\n}\r\n\r\nexport function GetRandomColor(): string {\r\n    return `rgb(${GetRandomArbitrary(256)},${GetRandomArbitrary(256)},${GetRandomArbitrary(256)})`\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/util.service.ts","/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport class Point {\r\n    constructor(public x: number, public y: number){}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/point.entity.ts","import {Point} from \"./point.entity\";\r\nexport class Circle {\r\n    constructor(\r\n        public origin: Point,\r\n        public radius: number\r\n    ){}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/circle.entity.ts","/**\r\n * Created by Grimbode on 21/11/2017.\r\n */\r\nimport {App} from \"./app\";\r\nvar module;\r\n/**\r\n * Created by kfaulhaber on 30/06/2017.\r\n */\r\n\r\n/**\r\n * Binding library to exports\r\n * @type {App}\r\n */\r\nmodule.exports = App;\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import {DEFAULT_GAME_CONFIG} from \"./config/config\";\r\nimport {GameService} from \"./services/game.service\";\r\nexport class App {\r\n\r\n    private game: GameService;\r\n    private canvasId: string;\r\n    private canvasElement: HTMLCanvasElement;\r\n    private si = -1;\r\n    constructor(canvasId: string){\r\n        this.canvasId = canvasId;\r\n        window.addEventListener(\"load\", this.loadHandler);\r\n        window.addEventListener(\"resize\", this.resize);\r\n\r\n    }\r\n\r\n    private loadHandler = () => {\r\n        this.canvasElement = <HTMLCanvasElement>document.getElementById(this.canvasId);\r\n        if(!this.canvasElement) return console.warn(\"No canvas element found.\");\r\n        this.resize(()=>{\r\n            this.game = new GameService(this.canvasElement , 3, 3, 1);\r\n        });\r\n\r\n    };\r\n\r\n    private resize = (callback: any = null) => {\r\n        if(this.si > -1) clearTimeout(this.si);\r\n\r\n        //no point in changing size if the user constantly changes the window size.\r\n        this.si = setTimeout(()=>{\r\n            this.canvasElement.width = window.innerWidth;\r\n            this.canvasElement.height = window.innerHeight;\r\n            //TODO: Regenerate all systems?\r\n            if(callback && callback != null){\r\n                callback();\r\n            }\r\n        }, 400);\r\n    };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app.ts","import {Polygon} from \"../entities/polygon.entity\";\r\nimport {\r\n    DistanceBetweenTwoPoints, GetRandomArbitrary, GetRandomColor,\r\n    GetVertexFromRadiusAndAngle\r\n} from \"./util.service\";\r\nimport {System} from \"../entities/system.entity\";\r\nimport {Point} from \"../entities/point.entity\";\r\nimport {Orbit} from \"../entities/orbit.entity\";\r\nimport {Circle} from \"../entities/circle.entity\";\r\n/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport class GameService {\r\n\r\n    private interval: number;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private systems: System[];\r\n\r\n    constructor(\r\n        private canvas: HTMLCanvasElement,\r\n        private initialSystemCount: number = 10,\r\n        private initialPlanetCount: number = 10,\r\n        private inception: number = 0,\r\n        private fps: number = 30,\r\n        private then: number = Date.now()\r\n    ){\r\n        this.interval = 1000/fps;\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.setup();\r\n    }\r\n\r\n    private setup(){\r\n        this.systems = [];\r\n        this.createSystems();\r\n\r\n        this.systems.forEach((system: System)=>{\r\n            this.createPlanets(system, this.inception);\r\n        });\r\n        this.loop();\r\n\r\n    }\r\n\r\n    private createSystems(){\r\n        for(let i = 0; i < this.initialSystemCount; i++){\r\n            this.createSystem()\r\n        }\r\n    }\r\n\r\n    private createSystem(){\r\n        let point = new Point(\r\n            GetRandomArbitrary(this.canvas.offsetWidth),\r\n            GetRandomArbitrary(this.canvas.offsetHeight)\r\n        );\r\n        let sun = new Circle(point, GetRandomArbitrary(100, 80));\r\n        console.log(`System point: ${point.x}, ${point.y}`);\r\n        let system =new System(point);\r\n        system.sun = sun;\r\n        this.systems.push(system);\r\n    }\r\n\r\n    private createPlanets(system: System, inception: number = 0){\r\n        let planetCount = GetRandomArbitrary(this.initialPlanetCount+1,1);\r\n        for(let i = 0; i < planetCount; i++){\r\n\r\n            let offset = system instanceof Polygon\r\n                ? system.radius + system.radius*0.5\r\n                : system.sun.radius + system.sun.radius*0.5\r\n\r\n            let orbitRadiusMin, orbitRadiusMax;\r\n            orbitRadiusMax = orbitRadiusMin\r\n                = system.planets.length > 0\r\n                ? system.planets[system.planets.length-1].orbit.radius + offset\r\n                : offset;\r\n\r\n            this.createPlanet(system, GetRandomArbitrary(orbitRadiusMax, orbitRadiusMin));\r\n\r\n            if(inception > 0 && system.planets.length > 0){\r\n                this.createPlanets(system.planets[system.planets.length-1], inception-1)\r\n            }\r\n        }\r\n    }\r\n\r\n    private createPlanet(system: System, radius: number) {\r\n        let initAngle = GetRandomArbitrary(2*Math.PI);\r\n        let orbit = new Orbit(\r\n            system.point,\r\n            radius,\r\n            initAngle,\r\n            GetRandomArbitrary(2) == 0,\r\n            GetRandomArbitrary(100)/10000\r\n        );\r\n\r\n        let point = new Point(\r\n            (orbit.radius)*Math.cos(GetRandomArbitrary(orbit.angle)),\r\n            (orbit.radius)*Math.sin(GetRandomArbitrary(orbit.angle))\r\n        );\r\n\r\n        let polygon = new Polygon(\r\n            point,\r\n            GetRandomArbitrary(orbit.radius*.2),\r\n            GetRandomColor()\r\n        );\r\n\r\n        console.log(polygon.color);\r\n        this.populateWithAngles(polygon);\r\n\r\n        polygon.orbit = orbit;\r\n        console.log(polygon);\r\n        system.planets.push(polygon);\r\n    }\r\n\r\n    private populateWithAngles(planet: Polygon){\r\n        let vertexesNumber  = GetRandomArbitrary(10, 3);\r\n        for(let i = 0, a = 0; i < vertexesNumber; i++, a += Math.PI*2/vertexesNumber){\r\n            planet.add(a);\r\n        }\r\n    }\r\n\r\n    private loop = () => {\r\n            requestAnimationFrame(this.loop);\r\n            this.update();\r\n            this.draw();\r\n    };\r\n\r\n    private update(){\r\n        this.systems.forEach((system: System)=>{\r\n            this.updateSystemInception(system);\r\n        })\r\n    }\r\n\r\n    private updateSystemInception(system: System){\r\n        system.planets.forEach((planet: Polygon)=>{\r\n\r\n            planet.orbit.angle = (planet.orbit.angle + (planet.orbit.aDirection ? planet.orbit.speed : -planet.orbit.speed)) % (Math.PI*2);\r\n\r\n            planet.point.x = (planet.orbit.radius)*Math.cos(planet.orbit.angle);\r\n            planet.point.y = (planet.orbit.radius)*Math.sin(planet.orbit.angle);\r\n\r\n            let distance = DistanceBetweenTwoPoints(planet.point, new Point(0,0))\r\n            if(Math.abs(distance - planet.orbit.radius) > 1){\r\n                console.warn(`\r\n                    Radius different: Calc ${distance} != Origin Radius ${planet.orbit.radius}, \\n\r\n                    Planet point: ${planet.point.x}, ${planet.point.y}, \\n\r\n                    Planet angle: ${planet.orbit.angle}, \\n\r\n                `)\r\n            }\r\n\r\n            if(planet.planets.length > 0){\r\n                this.updateSystemInception(planet);\r\n            }\r\n        });\r\n    }\r\n\r\n    private draw(){\r\n        let now = Date.now();\r\n        let delta = now - this.then;\r\n\r\n        if(delta > this.interval){\r\n            this.then = now - (delta % this.interval);\r\n\r\n            //TODO: divide this into regions, for optimization.\r\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n            /*this.systems.forEach((system: System) => {\r\n                system.planets.forEach(this.recursiveClear);\r\n            });*/\r\n\r\n            //Draw stuff here.\r\n            this.systems.forEach((system: System)=>{\r\n                this.drawCircle(system.sun);\r\n                this.systemInception(system);\r\n            });\r\n        }\r\n    }\r\n\r\n    private recursiveClear = (planet: Polygon) => {\r\n        this.ctx.save();\r\n        this.ctx.translate(planet.orbit.origin.x, planet.orbit.origin.y);\r\n        let diameter = planet.radius*2;\r\n        this.ctx.clearRect(\r\n            Math.floor(planet.point.x-diameter),\r\n            Math.floor(planet.point.y-diameter),\r\n            Math.ceil(diameter*2),\r\n            Math.ceil(diameter*2)\r\n        );\r\n\r\n        if(planet.planets.length > 0){\r\n            planet.planets.forEach(this.recursiveClear);\r\n        }\r\n        this.ctx.restore();\r\n\r\n\r\n    };\r\n\r\n    private systemInception(system: System){\r\n        this.ctx.save();\r\n        this.ctx.translate(system.point.x, system.point.y);\r\n        system.planets.forEach((planet: Polygon)=>{\r\n            this.drawOrbit(planet.orbit);\r\n            this.drawPolygon(planet);\r\n            //The planet has moons.\r\n            if(planet.planets.length > 0){\r\n                this.systemInception(planet)\r\n            }\r\n\r\n        });\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawOrbit(orbit: Orbit){\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0,0, orbit.radius, 0, 2*Math.PI);\r\n        this.ctx.strokeStyle = \"#d3d3d3\";\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    private drawPolygon(polygon: Polygon){\r\n        this.ctx.save();\r\n        this.ctx.translate(polygon.point.x, polygon.point.y);\r\n        this.ctx.beginPath();\r\n        let init = GetVertexFromRadiusAndAngle(polygon.radius, polygon.angles[0]);\r\n        this.ctx.moveTo(init.x, init.y);\r\n        polygon.angles.forEach((angle: number, i: number)=>{\r\n            //Already handled first vertex.\r\n            if(i === 0) return;\r\n            let vertex = GetVertexFromRadiusAndAngle(polygon.radius, angle);\r\n            this.ctx.lineTo(vertex.x, vertex.y)\r\n        });\r\n        this.ctx.closePath();\r\n        this.ctx.fillStyle = polygon.color;\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawCircle(circle: Circle){\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(circle.origin.x, circle.origin.y, circle.radius, 0, 2*Math.PI);\r\n        this.ctx.fillStyle = \"yellow\";\r\n        this.ctx.fill();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/game.service.ts","import {Vertex} from \"./vertex.entity\";\r\nimport {System} from \"./system.entity\";\r\nimport {Point} from \"./point.entity\";\r\nimport {Orbit} from \"./orbit.entity\";\r\n/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport class Polygon extends System {\r\n\r\n    public angles: number[];\r\n    public orbit: Orbit;\r\n\r\n    constructor(\r\n        public point: Point,\r\n        public radius: number,\r\n        public color: string,\r\n        public rotationSpeed: number = 10,\r\n        public rotationDirection: boolean = true\r\n    ){\r\n        super(point);\r\n        this.angles = [];\r\n    }\r\n\r\n    public add(angle: number){\r\n        this.angles.push(angle);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/polygon.entity.ts","import {Point} from \"./point.entity\";\r\nexport class Vertex extends Point{\r\n    constructor(x: number, y: number){\r\n        super(x,y);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/vertex.entity.ts","import {Circle} from \"./circle.entity\";\r\nimport {Point} from \"./point.entity\";\r\n/**\r\n * Created by Grimbode on 02/12/2017.\r\n */\r\n\r\nexport class Orbit extends Circle{\r\n    constructor(\r\n        point: Point,\r\n        radius: number,\r\n        public angle: number,\r\n        public aDirection: boolean,\r\n        public speed: number\r\n    ){\r\n        super(point, radius);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/entities/orbit.entity.ts"],"sourceRoot":""}